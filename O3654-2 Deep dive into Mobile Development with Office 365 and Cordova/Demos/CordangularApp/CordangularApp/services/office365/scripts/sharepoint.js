//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var MS;
(function (MS) {
    (function (Extensions) {
        var ObservableBase = (function () {
            function ObservableBase() {
                this._changedListeners = [];
            }
            Object.defineProperty(ObservableBase.prototype, "changed", {
                get: function () {
                    return this._changed;
                },
                set: function (value) {
                    var _this = this;
                    this._changed = value;
                    this._changedListeners.forEach((function (value, index, array) {
                        try  {
                            value(_this);
                        } catch (e) {
                        }
                    }).bind(this));
                },
                enumerable: true,
                configurable: true
            });


            ObservableBase.prototype.addChangedListener = function (eventFn) {
                this._changedListeners.push(eventFn);
            };

            ObservableBase.prototype.removeChangedListener = function (eventFn) {
                var index = this._changedListeners.indexOf(eventFn);
                if (index >= 0) {
                    this._changedListeners.splice(index, 1);
                }
            };
            return ObservableBase;
        })();
        Extensions.ObservableBase = ObservableBase;

        var ObservableCollection = (function (_super) {
            __extends(ObservableCollection, _super);
            function ObservableCollection() {
                var items = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    items[_i] = arguments[_i + 0];
                }
                var _this = this;
                _super.call(this);
                this._changedListener = (function (changed) {
                    _this.changed = true;
                }).bind(this);
                this._array = items;
            }
            ObservableCollection.prototype.item = function (n) {
                return this._array[n];
            };

            /**
            * Removes the last element from an array and returns it.
            */
            ObservableCollection.prototype.pop = function () {
                this.changed = true;
                var result = this._array.pop();
                result.removeChangedListener(this._changedListener);
                return result;
            };

            /**
            * Removes the first element from an array and returns it.
            */
            ObservableCollection.prototype.shift = function () {
                this.changed = true;
                var result = this._array.shift();
                result.removeChangedListener(this._changedListener);
                return result;
            };

            /**
            * Appends new elements to an array, and returns the new length of the array.
            * @param items New elements of the Array.
            */
            ObservableCollection.prototype.push = function () {
                var _this = this;
                var items = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    items[_i] = arguments[_i + 0];
                }
                items.forEach((function (value, index, array) {
                    try  {
                        value.addChangedListener(_this._changedListener);
                        _this._array.push(value);
                    } catch (e) {
                    }
                }).bind(this));
                this.changed = true;
                return this._array.length;
            };

            /**
            * Removes elements from an array, returning the deleted elements.
            * @param start The zero-based location in the array from which to start removing elements.
            * @param deleteCount The number of elements to remove.
            * @param items Elements to insert into the array in place of the deleted elements.
            */
            ObservableCollection.prototype.splice = function (start, deleteCount) {
                var _this = this;
                var result = this._array.splice(start, deleteCount);
                result.forEach((function (value, index, array) {
                    try  {
                        value.removeChangedListener(_this._changedListener);
                    } catch (e) {
                    }
                }).bind(this));
                this.changed = true;
                return result;
            };

            /**
            * Inserts new elements at the start of an array.
            * @param items  Elements to insert at the start of the Array.
            */
            ObservableCollection.prototype.unshift = function () {
                var items = [];
                for (var _i = 0; _i < (arguments.length - 0); _i++) {
                    items[_i] = arguments[_i + 0];
                }
                for (var index = items.length - 1; index >= 0; index--) {
                    try  {
                        items[index].addChangedListener(this._changedListener);
                        this._array.unshift(items[index]);
                    } catch (e) {
                    }
                }
                this.changed = true;
                return this._array.length;
            };

            /**
            * Performs the specified action for each element in an array.
            * @param callbackfn  A function that accepts up to three arguments. forEach calls the callbackfn function one time for each element in the array.
            * @param thisArg  An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            */
            ObservableCollection.prototype.forEach = function (callbackfn, thisArg) {
                this._array.forEach(callbackfn, thisArg);
            };

            /**
            * Calls a defined callback function on each element of an array, and returns an array that contains the results.
            * @param callbackfn A function that accepts up to three arguments. The map method calls the callbackfn function one time for each element in the array.
            * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            */
            ObservableCollection.prototype.map = function (callbackfn, thisArg) {
                return this._array.map(callbackfn, thisArg);
            };

            /**
            * Returns the elements of an array that meet the condition specified in a callback function.
            * @param callbackfn A function that accepts up to three arguments. The filter method calls the callbackfn function one time for each element in the array.
            * @param thisArg An object to which the this keyword can refer in the callbackfn function. If thisArg is omitted, undefined is used as the this value.
            */
            ObservableCollection.prototype.filter = function (callbackfn, thisArg) {
                return this._array.filter(callbackfn, thisArg);
            };

            /**
            * Calls the specified callback function for all the elements in an array. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            * @param callbackfn A function that accepts up to four arguments. The reduce method calls the callbackfn function one time for each element in the array.
            * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
            */
            ObservableCollection.prototype.reduce = function (callbackfn, initialValue) {
                return this._array.reduce(callbackfn, initialValue);
            };

            /**
            * Calls the specified callback function for all the elements in an array, in descending order. The return value of the callback function is the accumulated result, and is provided as an argument in the next call to the callback function.
            * @param callbackfn A function that accepts up to four arguments. The reduceRight method calls the callbackfn function one time for each element in the array.
            * @param initialValue If initialValue is specified, it is used as the initial value to start the accumulation. The first call to the callbackfn function provides this value as an argument instead of an array value.
            */
            ObservableCollection.prototype.reduceRight = function (callbackfn, initialValue) {
                return this._array.reduceRight(callbackfn, initialValue);
            };

            Object.defineProperty(ObservableCollection.prototype, "length", {
                /**
                * Gets or sets the length of the array. This is a number one higher than the highest element defined in an array.
                */
                get: function () {
                    return this._array.length;
                },
                enumerable: true,
                configurable: true
            });
            return ObservableCollection;
        })(ObservableBase);
        Extensions.ObservableCollection = ObservableCollection;

        var Request = (function () {
            function Request(requestUri) {
                this.requestUri = requestUri;
                this.headers = {};
                this.disableCache = false;
            }
            return Request;
        })();
        Extensions.Request = Request;

        var DataContext = (function () {
            function DataContext(serviceRootUri, extraQueryParameters, getAccessTokenFn) {
                this._noCache = Date.now();
                this.serviceRootUri = serviceRootUri;
                this.extraQueryParameters = extraQueryParameters;
                this._getAccessTokenFn = getAccessTokenFn;
            }
            Object.defineProperty(DataContext.prototype, "serviceRootUri", {
                get: function () {
                    return this._serviceRootUri;
                },
                set: function (value) {
                    if (value.lastIndexOf("/") === value.length - 1) {
                        value = value.substring(0, value.length - 1);
                    }

                    this._serviceRootUri = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(DataContext.prototype, "extraQueryParameters", {
                get: function () {
                    return this._extraQueryParameters;
                },
                set: function (value) {
                    this._extraQueryParameters = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(DataContext.prototype, "disableCache", {
                get: function () {
                    return this._disableCache;
                },
                set: function (value) {
                    this._disableCache = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(DataContext.prototype, "disableCacheOverride", {
                get: function () {
                    return this._disableCacheOverride;
                },
                set: function (value) {
                    this._disableCacheOverride = value;
                },
                enumerable: true,
                configurable: true
            });


            DataContext.prototype.ajax = function (request) {
                var deferred = new Microsoft.Utility.Deferred();

                var xhr = new XMLHttpRequest();

                if (!request.method) {
                    request.method = 'GET';
                }

                xhr.open(request.method.toUpperCase(), request.requestUri, true);

                if (request.headers) {
                    for (name in request.headers) {
                        xhr.setRequestHeader(name, request.headers[name]);
                    }
                }

                xhr.onreadystatechange = function (e) {
                    if (xhr.readyState == 4) {
                        if (xhr.status >= 200 && xhr.status < 300 || xhr.status === 304) {
                            deferred.resolve(xhr.responseText);
                        } else {
                            deferred.reject(xhr);
                        }
                    } else {
                        deferred.notify(xhr.readyState);
                    }
                };

                if (request.data) {
                    if (typeof request.data === 'string') {
                        xhr.send(request.data);
                    } else {
                        xhr.send(JSON.stringify(request.data));
                    }
                } else {
                    xhr.send();
                }

                return deferred;
            };

            DataContext.prototype.read = function (path) {
                return this.request(new Request(this.serviceRootUri + ((this.serviceRootUri.lastIndexOf('/') != this.serviceRootUri.length - 1) ? '/' : '') + path));
            };

            DataContext.prototype.readUrl = function (url) {
                return this.request(new Request(url));
            };

            DataContext.prototype.request = function (request) {
                var _this = this;
                var deferred;

                this.augmentRequest(request);

                if (this._getAccessTokenFn) {
                    deferred = new Microsoft.Utility.Deferred();

                    this._getAccessTokenFn().then((function (token) {
                        request.headers["X-ClientService-ClientTag"] = 'Office 365 API Tools, 1.1.0512';
                        request.headers["Authorization"] = 'Bearer ' + token;
                        _this.ajax(request).then(deferred.resolve.bind(deferred), deferred.reject.bind(deferred));
                    }).bind(this), deferred.reject.bind(deferred));
                } else {
                    deferred = this.ajax(request);
                }

                return deferred;
            };

            DataContext.prototype.augmentRequest = function (request) {
                if (!request.headers) {
                    request.headers = {};
                }

                if (!request.headers['Accept']) {
                    request.headers['Accept'] = 'application/json;odata=verbose';
                }

                if (!request.headers['Content-Type']) {
                    request.headers['Content-Type'] = 'application/json';
                }

                if (this.extraQueryParameters) {
                    request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + this.extraQueryParameters;
                }

                if ((!this._disableCacheOverride && request.disableCache) || (this._disableCacheOverride && this._disableCache)) {
                    request.requestUri += (request.requestUri.indexOf('?') >= 0 ? '&' : '?') + '_=' + this._noCache++;
                }
            };
            return DataContext;
        })();
        Extensions.DataContext = DataContext;

        var PagedCollection = (function () {
            function PagedCollection(context, path, resultFn, data) {
                this._context = context;
                this._path = path;
                this._resultFn = resultFn;
                this._data = data;
            }
            Object.defineProperty(PagedCollection.prototype, "path", {
                get: function () {
                    return this._path;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(PagedCollection.prototype, "context", {
                get: function () {
                    return this._context;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(PagedCollection.prototype, "currentPage", {
                get: function () {
                    return this._data;
                },
                enumerable: true,
                configurable: true
            });

            PagedCollection.prototype.getNextPage = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred();

                if (this.path == null) {
                    deferred.resolve(null);
                    return deferred;
                }

                var request = new Request(this.path);

                request.disableCache = true;

                this.context.request(request).then((function (data) {
                    var parsedData = JSON.parse(data), nextLink = (parsedData['odata.nextLink'] === undefined) ? ((parsedData['@odata.nextLink'] === undefined) ? ((parsedData['__next'] === undefined) ? null : parsedData['__next']) : parsedData['@odata.nextLink']) : parsedData['odata.nextLink'];

                    deferred.resolve(new PagedCollection(_this.context, nextLink, _this._resultFn, _this._resultFn(_this.context, parsedData)));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };
            return PagedCollection;
        })();
        Extensions.PagedCollection = PagedCollection;

        var CollectionQuery = (function () {
            function CollectionQuery(context, path, resultFn) {
                this._context = context;
                this._path = path;
                this._resultFn = resultFn;
            }
            Object.defineProperty(CollectionQuery.prototype, "path", {
                get: function () {
                    return this._path;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(CollectionQuery.prototype, "context", {
                get: function () {
                    return this._context;
                },
                enumerable: true,
                configurable: true
            });

            CollectionQuery.prototype.filter = function (filter) {
                this.addQuery("$filter=" + filter);
                return this;
            };

            CollectionQuery.prototype.select = function (selection) {
                if (typeof selection === 'string') {
                    this.addQuery("$select=" + selection);
                } else if (Array.isArray(selection)) {
                    this.addQuery("$select=" + selection.join(','));
                } else {
                    throw new Microsoft.Utility.Exception('\'select\' argument must be string or string[].');
                }
                return this;
            };

            CollectionQuery.prototype.expand = function (expand) {
                if (typeof expand === 'string') {
                    this.addQuery("$expand=" + expand);
                } else if (Array.isArray(expand)) {
                    this.addQuery("$expand=" + expand.join(','));
                } else {
                    throw new Microsoft.Utility.Exception('\'expand\' argument must be string or string[].');
                }
                return this;
            };

            CollectionQuery.prototype.orderBy = function (orderBy) {
                if (typeof orderBy === 'string') {
                    this.addQuery("$orderby=" + orderBy);
                } else if (Array.isArray(orderBy)) {
                    this.addQuery("$orderby=" + orderBy.join(','));
                } else {
                    throw new Microsoft.Utility.Exception('\'orderBy\' argument must be string or string[].');
                }
                return this;
            };

            CollectionQuery.prototype.top = function (top) {
                this.addQuery("$top=" + top);
                return this;
            };

            CollectionQuery.prototype.skip = function (skip) {
                this.addQuery("$skip=" + skip);
                return this;
            };

            CollectionQuery.prototype.addQuery = function (query) {
                this._query = (this._query ? this._query + "&" : "") + query;
                return this;
            };

            Object.defineProperty(CollectionQuery.prototype, "query", {
                get: function () {
                    return this._query;
                },
                set: function (value) {
                    this._query = value;
                },
                enumerable: true,
                configurable: true
            });


            CollectionQuery.prototype.fetch = function () {
                var path = this.path + (this._query ? (this.path.indexOf('?') < 0 ? '?' : '&') + this._query : "");

                return new Extensions.PagedCollection(this.context, path, this._resultFn).getNextPage();
            };

            CollectionQuery.prototype.fetchAll = function (maxItems) {
                var path = this.path + (this._query ? (this.path.indexOf('?') < 0 ? '?' : '&') + this._query : ""), pagedItems = new Extensions.PagedCollection(this.context, path, this._resultFn), accumulator = [], deferred = new Microsoft.Utility.Deferred(), recursive = function (nextPagedItems) {
                    if (!nextPagedItems) {
                        deferred.resolve(accumulator);
                    } else {
                        accumulator = accumulator.concat(nextPagedItems.currentPage);

                        if (accumulator.length > maxItems) {
                            accumulator = accumulator.splice(maxItems);
                            deferred.resolve(accumulator);
                        } else {
                            nextPagedItems.getNextPage().then(function (nextPage) {
                                return recursive(nextPage);
                            }, deferred.reject.bind(deferred));
                        }
                    }
                };

                pagedItems.getNextPage().then(function (nextPage) {
                    return recursive(nextPage);
                }, deferred.reject.bind(deferred));

                return deferred;
            };
            return CollectionQuery;
        })();
        Extensions.CollectionQuery = CollectionQuery;

        var QueryableSet = (function () {
            function QueryableSet(context, path, entity) {
                this._context = context;
                this._path = path;
                this._entity = entity;
            }
            Object.defineProperty(QueryableSet.prototype, "context", {
                get: function () {
                    return this._context;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(QueryableSet.prototype, "entity", {
                get: function () {
                    return this._entity;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(QueryableSet.prototype, "path", {
                get: function () {
                    return this._path;
                },
                enumerable: true,
                configurable: true
            });

            QueryableSet.prototype.getPath = function (prop) {
                return this._path + '/' + prop;
            };
            return QueryableSet;
        })();
        Extensions.QueryableSet = QueryableSet;

        var RestShallowObjectFetcher = (function () {
            function RestShallowObjectFetcher(context, path) {
                this._path = path;
                this._context = context;
            }
            Object.defineProperty(RestShallowObjectFetcher.prototype, "context", {
                get: function () {
                    return this._context;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(RestShallowObjectFetcher.prototype, "path", {
                get: function () {
                    return this._path;
                },
                enumerable: true,
                configurable: true
            });

            RestShallowObjectFetcher.prototype.getPath = function (prop) {
                return this._path + '/' + prop;
            };
            return RestShallowObjectFetcher;
        })();
        Extensions.RestShallowObjectFetcher = RestShallowObjectFetcher;

        var ComplexTypeBase = (function (_super) {
            __extends(ComplexTypeBase, _super);
            function ComplexTypeBase() {
                _super.call(this);
            }
            return ComplexTypeBase;
        })(ObservableBase);
        Extensions.ComplexTypeBase = ComplexTypeBase;

        var EntityBase = (function (_super) {
            __extends(EntityBase, _super);
            function EntityBase(context, path) {
                _super.call(this);
                this._path = path;
                this._context = context;
            }
            Object.defineProperty(EntityBase.prototype, "context", {
                get: function () {
                    return this._context;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(EntityBase.prototype, "path", {
                get: function () {
                    return this._path;
                },
                enumerable: true,
                configurable: true
            });

            EntityBase.prototype.getPath = function (prop) {
                return this._path + '/' + prop;
            };
            return EntityBase;
        })(ObservableBase);
        Extensions.EntityBase = EntityBase;

        /*
        std
        */
        function isUndefined(v) {
            return typeof v === 'undefined';
        }
        Extensions.isUndefined = isUndefined;
    })(MS.Extensions || (MS.Extensions = {}));
    var Extensions = MS.Extensions;
})(MS || (MS = {}));

var MS;
(function (MS) {
    /// <summary>
    /// There are no comments for ApiData in the schema.
    /// </summary>
    var SharePointClient = (function () {
        function SharePointClient(serviceRootUri, getAccessTokenFn) {
            this._context = new MS.Extensions.DataContext(serviceRootUri, undefined, getAccessTokenFn);
        }
        Object.defineProperty(SharePointClient.prototype, "context", {
            get: function () {
                return this._context;
            },
            enumerable: true,
            configurable: true
        });

        SharePointClient.prototype.getPath = function (prop) {
            return this.context.serviceRootUri + '/' + prop;
        };

        Object.defineProperty(SharePointClient.prototype, "files", {
            get: function () {
                if (this._Files === undefined) {
                    this._Files = new MS.FileServices.FileSystemItems(this.context, this.getPath('Files'));
                }
                return this._Files;
            },
            enumerable: true,
            configurable: true
        });
        return SharePointClient;
    })();
    MS.SharePointClient = SharePointClient;
})(MS || (MS = {}));

var MS;
(function (MS) {
    (function (FileServices) {
        /// <summary>
        /// There are no comments for UserInformation in the schema.
        /// </summary>
        var UserInformation = (function (_super) {
            __extends(UserInformation, _super);
            function UserInformation(data) {
                _super.call(this);
                this._odataType = 'MS.FileServices.UserInformation';
                this._IdChanged = false;
                this._NameChanged = false;
                this._PuidChanged = false;

                if (!data) {
                    return;
                }

                this._Id = data.Id;
                this._Name = data.Name;
                this._Puid = data.Puid;
            }
            Object.defineProperty(UserInformation.prototype, "id", {
                /// <summary>
                /// There are no comments for Property Id in the schema.
                /// </summary>
                get: function () {
                    return this._Id;
                },
                set: function (value) {
                    if (value !== this._Id) {
                        this._IdChanged = true;
                        this.changed = true;
                    }
                    this._Id = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(UserInformation.prototype, "idChanged", {
                get: function () {
                    return this._IdChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(UserInformation.prototype, "name", {
                /// <summary>
                /// There are no comments for Property Name in the schema.
                /// </summary>
                get: function () {
                    return this._Name;
                },
                set: function (value) {
                    if (value !== this._Name) {
                        this._NameChanged = true;
                        this.changed = true;
                    }
                    this._Name = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(UserInformation.prototype, "nameChanged", {
                get: function () {
                    return this._NameChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(UserInformation.prototype, "puid", {
                /// <summary>
                /// There are no comments for Property Puid in the schema.
                /// </summary>
                get: function () {
                    return this._Puid;
                },
                set: function (value) {
                    if (value !== this._Puid) {
                        this._PuidChanged = true;
                        this.changed = true;
                    }
                    this._Puid = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(UserInformation.prototype, "puidChanged", {
                get: function () {
                    return this._PuidChanged;
                },
                enumerable: true,
                configurable: true
            });

            UserInformation.parseUserInformation = function (data) {
                if (!data)
                    return null;

                return new UserInformation(data);
            };

            UserInformation.parseUserInformations = function (data) {
                var results = new MS.Extensions.ObservableCollection();

                if (data) {
                    for (var i = 0; i < data.length; ++i) {
                        results.push(UserInformation.parseUserInformation(data[i]));
                    }
                }

                results.changed = false;

                return results;
            };

            UserInformation.prototype.getRequestBody = function () {
                return {
                    Id: (this.idChanged && this.id) ? this.id : undefined,
                    Name: (this.nameChanged && this.name) ? this.name : undefined,
                    Puid: (this.puidChanged && this.puid) ? this.puid : undefined,
                    '__metadata': { type: this._odataType }
                };
            };
            return UserInformation;
        })(MS.Extensions.ComplexTypeBase);
        FileServices.UserInformation = UserInformation;

        /// <summary>
        /// There are no comments for FileSystemItem in the schema.
        /// </summary>
        var FileSystemItemFetcher = (function (_super) {
            __extends(FileSystemItemFetcher, _super);
            function FileSystemItemFetcher(context, path) {
                _super.call(this, context, path);
            }
            return FileSystemItemFetcher;
        })(MS.Extensions.RestShallowObjectFetcher);
        FileServices.FileSystemItemFetcher = FileSystemItemFetcher;

        /// <summary>
        /// There are no comments for FileSystemItem in the schema.
        /// </summary>
        var FileSystemItem = (function (_super) {
            __extends(FileSystemItem, _super);
            function FileSystemItem(context, path, data) {
                var _this = this;
                _super.call(this, context, path);
                this._odataType = 'MS.FileServices.FileSystemItem';
                this._CreatedByChanged = false;
                this._CreatedByChangedListener = (function (value) {
                    _this._CreatedByChanged = true;
                    _this.changed = true;
                }).bind(this);
                this._ETagChanged = false;
                this._IdChanged = false;
                this._LastModifiedByChanged = false;
                this._LastModifiedByChangedListener = (function (value) {
                    _this._LastModifiedByChanged = true;
                    _this.changed = true;
                }).bind(this);
                this._NameChanged = false;
                this._SizeChanged = false;
                this._TimeCreatedChanged = false;
                this._TimeLastModifiedChanged = false;
                this._UrlChanged = false;

                if (!data) {
                    return;
                }

                this._CreatedBy = UserInformation.parseUserInformation(data.CreatedBy);
                if (this._CreatedBy) {
                    this._CreatedBy.addChangedListener(this._CreatedByChangedListener);
                }
                this._ETag = data.ETag;
                this._Id = data.Id;
                this._LastModifiedBy = UserInformation.parseUserInformation(data.LastModifiedBy);
                if (this._LastModifiedBy) {
                    this._LastModifiedBy.addChangedListener(this._LastModifiedByChangedListener);
                }
                this._Name = data.Name;
                this._Size = data.Size;
                this._TimeCreated = (data.TimeCreated !== null) ? new Date(data.TimeCreated) : null;
                this._TimeLastModified = (data.TimeLastModified !== null) ? new Date(data.TimeLastModified) : null;
                this._Url = data.Url;
            }
            Object.defineProperty(FileSystemItem.prototype, "createdBy", {
                /// <summary>
                /// There are no comments for Property CreatedBy in the schema.
                /// </summary>
                get: function () {
                    return this._CreatedBy;
                },
                set: function (value) {
                    if (this._CreatedBy) {
                        this._CreatedBy.removeChangedListener(this._CreatedByChangedListener);
                    }
                    if (value !== this._CreatedBy) {
                        this._CreatedByChanged = true;
                        this.changed = true;
                    }
                    if (this._CreatedBy) {
                        this._CreatedBy.addChangedListener(this._CreatedByChangedListener);
                    }
                    this._CreatedBy = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "createdByChanged", {
                get: function () {
                    return this._CreatedByChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "eTag", {
                /// <summary>
                /// There are no comments for Property ETag in the schema.
                /// </summary>
                get: function () {
                    return this._ETag;
                },
                set: function (value) {
                    if (value !== this._ETag) {
                        this._ETagChanged = true;
                        this.changed = true;
                    }
                    this._ETag = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "eTagChanged", {
                get: function () {
                    return this._ETagChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "id", {
                /// <summary>
                /// There are no comments for Property Id in the schema.
                /// </summary>
                get: function () {
                    return this._Id;
                },
                set: function (value) {
                    if (value !== this._Id) {
                        this._IdChanged = true;
                        this.changed = true;
                    }
                    this._Id = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "idChanged", {
                get: function () {
                    return this._IdChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "lastModifiedBy", {
                /// <summary>
                /// There are no comments for Property LastModifiedBy in the schema.
                /// </summary>
                get: function () {
                    return this._LastModifiedBy;
                },
                set: function (value) {
                    if (this._LastModifiedBy) {
                        this._LastModifiedBy.removeChangedListener(this._LastModifiedByChangedListener);
                    }
                    if (value !== this._LastModifiedBy) {
                        this._LastModifiedByChanged = true;
                        this.changed = true;
                    }
                    if (this._LastModifiedBy) {
                        this._LastModifiedBy.addChangedListener(this._LastModifiedByChangedListener);
                    }
                    this._LastModifiedBy = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "lastModifiedByChanged", {
                get: function () {
                    return this._LastModifiedByChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "name", {
                /// <summary>
                /// There are no comments for Property Name in the schema.
                /// </summary>
                get: function () {
                    return this._Name;
                },
                set: function (value) {
                    if (value !== this._Name) {
                        this._NameChanged = true;
                        this.changed = true;
                    }
                    this._Name = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "nameChanged", {
                get: function () {
                    return this._NameChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "size", {
                /// <summary>
                /// There are no comments for Property Size in the schema.
                /// </summary>
                get: function () {
                    return this._Size;
                },
                set: function (value) {
                    if (value !== this._Size) {
                        this._SizeChanged = true;
                        this.changed = true;
                    }
                    this._Size = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "sizeChanged", {
                get: function () {
                    return this._SizeChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "timeCreated", {
                /// <summary>
                /// There are no comments for Property TimeCreated in the schema.
                /// </summary>
                get: function () {
                    return this._TimeCreated;
                },
                set: function (value) {
                    if (value !== this._TimeCreated) {
                        this._TimeCreatedChanged = true;
                        this.changed = true;
                    }
                    this._TimeCreated = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "timeCreatedChanged", {
                get: function () {
                    return this._TimeCreatedChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "timeLastModified", {
                /// <summary>
                /// There are no comments for Property TimeLastModified in the schema.
                /// </summary>
                get: function () {
                    return this._TimeLastModified;
                },
                set: function (value) {
                    if (value !== this._TimeLastModified) {
                        this._TimeLastModifiedChanged = true;
                        this.changed = true;
                    }
                    this._TimeLastModified = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "timeLastModifiedChanged", {
                get: function () {
                    return this._TimeLastModifiedChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(FileSystemItem.prototype, "url", {
                /// <summary>
                /// There are no comments for Property Url in the schema.
                /// </summary>
                get: function () {
                    return this._Url;
                },
                set: function (value) {
                    if (value !== this._Url) {
                        this._UrlChanged = true;
                        this.changed = true;
                    }
                    this._Url = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileSystemItem.prototype, "urlChanged", {
                get: function () {
                    return this._UrlChanged;
                },
                enumerable: true,
                configurable: true
            });

            FileSystemItem.prototype.update = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'PATCH';
                request.data = JSON.stringify(this.getRequestBody());

                this.context.request(request).then(function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(FileSystemItem.parseFileSystemItem(_this.context, path, parsedData));
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileSystemItem.prototype.delete = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'DELETE';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileSystemItem.parseFileSystemItem = function (context, path, data) {
                if (!data)
                    return null;

                if (data['__metadata'] && data['__metadata']['type']) {
                    if (data['__metadata']['type'] === 'MS.FileServices.File')
                        return new File(context, path, data);
                    if (data['__metadata']['type'] === 'MS.FileServices.Folder')
                        return new Folder(context, path, data);
                }

                return new FileSystemItem(context, path, data);
            };

            FileSystemItem.parseFileSystemItems = function (context, pathFn, data) {
                var results = [];

                if (data) {
                    for (var i = 0; i < data.length; ++i) {
                        results.push(FileSystemItem.parseFileSystemItem(context, pathFn(data[i]), data[i]));
                    }
                }

                return results;
            };

            FileSystemItem.prototype.getRequestBody = function () {
                return {
                    CreatedBy: (this.createdByChanged && this.createdBy) ? this.createdBy.getRequestBody() : undefined,
                    ETag: (this.eTagChanged && this.eTag) ? this.eTag : undefined,
                    Id: (this.idChanged && this.id) ? this.id : undefined,
                    LastModifiedBy: (this.lastModifiedByChanged && this.lastModifiedBy) ? this.lastModifiedBy.getRequestBody() : undefined,
                    Name: (this.nameChanged && this.name) ? this.name : undefined,
                    Size: (this.sizeChanged && this.size) ? this.size : undefined,
                    TimeCreated: (this.timeCreatedChanged && this.timeCreated) ? this.timeCreated.toString() : undefined,
                    TimeLastModified: (this.timeLastModifiedChanged && this.timeLastModified) ? this.timeLastModified.toString() : undefined,
                    Url: (this.urlChanged && this.url) ? this.url : undefined,
                    '__metadata': { type: this._odataType }
                };
            };
            return FileSystemItem;
        })(MS.Extensions.EntityBase);
        FileServices.FileSystemItem = FileSystemItem;

        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        var FileFetcher = (function (_super) {
            __extends(FileFetcher, _super);
            function FileFetcher(context, path) {
                _super.call(this, context, path);
            }
            FileFetcher.prototype.fetch = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred();

                this.context.readUrl(this.path).then((function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(File.parseFile(_this.context, path, parsedData));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };
            FileFetcher.prototype.download = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("Download"));

                request.method = 'GET';

                this.context.request(request).then((function (data) {
                    deferred.resolve(data);
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };

            FileFetcher.prototype.copyTo = function (target, overwrite) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("CopyTo"));

                request.method = 'POST';
                request.data = JSON.stringify({ "target": target, "overwrite": overwrite });

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileFetcher.prototype.deleteObject = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("DeleteObject"));

                request.method = 'POST';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileFetcher.prototype.moveTo = function (target, overwrite) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("MoveTo"));

                request.method = 'POST';
                request.data = JSON.stringify({ "target": target, "overwrite": overwrite });

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileFetcher.prototype.upload = function (stream) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("Upload"));

                request.method = 'POST';
                request.data = stream;

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };
            return FileFetcher;
        })(FileSystemItemFetcher);
        FileServices.FileFetcher = FileFetcher;

        /// <summary>
        /// There are no comments for File in the schema.
        /// </summary>
        var File = (function (_super) {
            __extends(File, _super);
            function File(context, path, data) {
                _super.call(this, context, path, data);
                this._odataType = 'MS.FileServices.File';

                if (!data) {
                    return;
                }
            }
            File.prototype.download = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("Download"));

                request.method = 'GET';

                this.context.request(request).then((function (data) {
                    deferred.resolve(data);
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.copyTo = function (target, overwrite) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("CopyTo"));

                request.method = 'POST';
                request.data = JSON.stringify({ "target": target, "overwrite": overwrite });

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.deleteObject = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("DeleteObject"));

                request.method = 'POST';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.moveTo = function (target, overwrite) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("MoveTo"));

                request.method = 'POST';
                request.data = JSON.stringify({ "target": target, "overwrite": overwrite });

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.upload = function (stream) {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("Upload"));

                request.method = 'POST';
                request.data = stream;

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.update = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'PATCH';
                request.data = JSON.stringify(this.getRequestBody());

                this.context.request(request).then(function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(File.parseFile(_this.context, path, parsedData));
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.prototype.delete = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'DELETE';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            File.parseFile = function (context, path, data) {
                if (!data)
                    return null;

                return new File(context, path, data);
            };

            File.parseFiles = function (context, pathFn, data) {
                var results = [];

                if (data) {
                    for (var i = 0; i < data.length; ++i) {
                        results.push(File.parseFile(context, pathFn(data[i]), data[i]));
                    }
                }

                return results;
            };

            File.prototype.getRequestBody = function () {
                return {
                    CreatedBy: (this.createdByChanged && this.createdBy) ? this.createdBy.getRequestBody() : undefined,
                    ETag: (this.eTagChanged && this.eTag) ? this.eTag : undefined,
                    Id: (this.idChanged && this.id) ? this.id : undefined,
                    LastModifiedBy: (this.lastModifiedByChanged && this.lastModifiedBy) ? this.lastModifiedBy.getRequestBody() : undefined,
                    Name: (this.nameChanged && this.name) ? this.name : undefined,
                    Size: (this.sizeChanged && this.size) ? this.size : undefined,
                    TimeCreated: (this.timeCreatedChanged && this.timeCreated) ? this.timeCreated.toString() : undefined,
                    TimeLastModified: (this.timeLastModifiedChanged && this.timeLastModified) ? this.timeLastModified.toString() : undefined,
                    Url: (this.urlChanged && this.url) ? this.url : undefined,
                    '__metadata': { type: this._odataType }
                };
            };
            return File;
        })(FileSystemItem);
        FileServices.File = File;

        /// <summary>
        /// There are no comments for FileService in the schema.
        /// </summary>
        var FileServiceFetcher = (function (_super) {
            __extends(FileServiceFetcher, _super);
            function FileServiceFetcher(context, path) {
                _super.call(this, context, path);
            }
            FileServiceFetcher.prototype.fetch = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred();

                this.context.readUrl(this.path).then((function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(FileService.parseFileService(_this.context, path, parsedData));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };
            return FileServiceFetcher;
        })(MS.Extensions.RestShallowObjectFetcher);
        FileServices.FileServiceFetcher = FileServiceFetcher;

        /// <summary>
        /// There are no comments for FileService in the schema.
        /// </summary>
        var FileService = (function (_super) {
            __extends(FileService, _super);
            function FileService(context, path, data) {
                _super.call(this, context, path);
                this._odataType = 'MS.FileServices.FileService';
                this._Id4a81de82eeb94d6080ea5bf63e27023aChanged = false;

                if (!data) {
                    return;
                }

                this._Id4a81de82eeb94d6080ea5bf63e27023a = data.Id4a81de82eeb94d6080ea5bf63e27023a;
            }
            Object.defineProperty(FileService.prototype, "id4a81de82eeb94d6080ea5bf63e27023a", {
                /// <summary>
                /// There are no comments for Property Id4a81de82eeb94d6080ea5bf63e27023a in the schema.
                /// </summary>
                get: function () {
                    return this._Id4a81de82eeb94d6080ea5bf63e27023a;
                },
                set: function (value) {
                    if (value !== this._Id4a81de82eeb94d6080ea5bf63e27023a) {
                        this._Id4a81de82eeb94d6080ea5bf63e27023aChanged = true;
                        this.changed = true;
                    }
                    this._Id4a81de82eeb94d6080ea5bf63e27023a = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(FileService.prototype, "id4a81de82eeb94d6080ea5bf63e27023aChanged", {
                get: function () {
                    return this._Id4a81de82eeb94d6080ea5bf63e27023aChanged;
                },
                enumerable: true,
                configurable: true
            });

            FileService.prototype.update = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'PATCH';
                request.data = JSON.stringify(this.getRequestBody());

                this.context.request(request).then(function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(FileService.parseFileService(_this.context, path, parsedData));
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileService.prototype.delete = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'DELETE';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            FileService.parseFileService = function (context, path, data) {
                if (!data)
                    return null;

                return new FileService(context, path, data);
            };

            FileService.parseFileServices = function (context, pathFn, data) {
                var results = [];

                if (data) {
                    for (var i = 0; i < data.length; ++i) {
                        results.push(FileService.parseFileService(context, pathFn(data[i]), data[i]));
                    }
                }

                return results;
            };

            FileService.prototype.getRequestBody = function () {
                return {
                    Id4a81de82eeb94d6080ea5bf63e27023a: (this.id4a81de82eeb94d6080ea5bf63e27023aChanged && this.id4a81de82eeb94d6080ea5bf63e27023a) ? this.id4a81de82eeb94d6080ea5bf63e27023a : undefined,
                    '__metadata': { type: this._odataType }
                };
            };
            return FileService;
        })(MS.Extensions.EntityBase);
        FileServices.FileService = FileService;

        /// <summary>
        /// There are no comments for Folder in the schema.
        /// </summary>
        var FolderFetcher = (function (_super) {
            __extends(FolderFetcher, _super);
            function FolderFetcher(context, path) {
                _super.call(this, context, path);
            }
            Object.defineProperty(FolderFetcher.prototype, "children", {
                /// <summary>
                /// There are no comments for Query Property Children in the schema.
                /// </summary>
                get: function () {
                    if (this._Children === undefined) {
                        this._Children = new FileSystemItems(this.context, this.getPath("Children"));
                    }
                    return this._Children;
                },
                enumerable: true,
                configurable: true
            });

            FolderFetcher.prototype.fetch = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred();

                this.context.readUrl(this.path).then((function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(Folder.parseFolder(_this.context, path, parsedData));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };

            FolderFetcher.prototype.deleteObject = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("DeleteObject"));

                request.method = 'POST';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };
            return FolderFetcher;
        })(FileSystemItemFetcher);
        FileServices.FolderFetcher = FolderFetcher;

        /// <summary>
        /// There are no comments for Folder in the schema.
        /// </summary>
        var Folder = (function (_super) {
            __extends(Folder, _super);
            function Folder(context, path, data) {
                _super.call(this, context, path, data);
                this._odataType = 'MS.FileServices.Folder';
                this._ChildrenCountChanged = false;

                if (!data) {
                    return;
                }

                this._ChildrenCount = data.ChildrenCount;
            }
            Object.defineProperty(Folder.prototype, "childrenCount", {
                /// <summary>
                /// There are no comments for Property ChildrenCount in the schema.
                /// </summary>
                get: function () {
                    return this._ChildrenCount;
                },
                set: function (value) {
                    if (value !== this._ChildrenCount) {
                        this._ChildrenCountChanged = true;
                        this.changed = true;
                    }
                    this._ChildrenCount = value;
                },
                enumerable: true,
                configurable: true
            });


            Object.defineProperty(Folder.prototype, "childrenCountChanged", {
                get: function () {
                    return this._ChildrenCountChanged;
                },
                enumerable: true,
                configurable: true
            });

            Object.defineProperty(Folder.prototype, "children", {
                /// <summary>
                /// There are no comments for Query Property Children in the schema.
                /// </summary>
                get: function () {
                    if (this._Children === undefined) {
                        this._Children = new FileSystemItems(this.context, this.getPath("Children"));
                    }
                    return this._Children;
                },
                enumerable: true,
                configurable: true
            });

            Folder.prototype.deleteObject = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("DeleteObject"));

                request.method = 'POST';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            Folder.prototype.update = function () {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'PATCH';
                request.data = JSON.stringify(this.getRequestBody());

                this.context.request(request).then(function (data) {
                    var parsedData = JSON.parse(data), path = parsedData.d['__metadata']['id'];
                    deferred.resolve(Folder.parseFolder(_this.context, path, parsedData));
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            Folder.prototype.delete = function () {
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.path);

                request.method = 'DELETE';

                this.context.request(request).then(function (data) {
                    deferred.resolve(null);
                }, deferred.reject.bind(deferred));

                return deferred;
            };

            Folder.parseFolder = function (context, path, data) {
                if (!data)
                    return null;

                return new Folder(context, path, data);
            };

            Folder.parseFolders = function (context, pathFn, data) {
                var results = [];

                if (data) {
                    for (var i = 0; i < data.length; ++i) {
                        results.push(Folder.parseFolder(context, pathFn(data[i]), data[i]));
                    }
                }

                return results;
            };

            Folder.prototype.getRequestBody = function () {
                return {
                    ChildrenCount: (this.childrenCountChanged && this.childrenCount) ? this.childrenCount : undefined,
                    CreatedBy: (this.createdByChanged && this.createdBy) ? this.createdBy.getRequestBody() : undefined,
                    ETag: (this.eTagChanged && this.eTag) ? this.eTag : undefined,
                    Id: (this.idChanged && this.id) ? this.id : undefined,
                    LastModifiedBy: (this.lastModifiedByChanged && this.lastModifiedBy) ? this.lastModifiedBy.getRequestBody() : undefined,
                    Name: (this.nameChanged && this.name) ? this.name : undefined,
                    Size: (this.sizeChanged && this.size) ? this.size : undefined,
                    TimeCreated: (this.timeCreatedChanged && this.timeCreated) ? this.timeCreated.toString() : undefined,
                    TimeLastModified: (this.timeLastModifiedChanged && this.timeLastModified) ? this.timeLastModified.toString() : undefined,
                    Url: (this.urlChanged && this.url) ? this.url : undefined,
                    '__metadata': { type: this._odataType }
                };
            };
            return Folder;
        })(FileSystemItem);
        FileServices.Folder = Folder;
        var FileSystemItems = (function (_super) {
            __extends(FileSystemItems, _super);
            function FileSystemItems(context, path, entity) {
                _super.call(this, context, path, entity);

                this._parseCollectionFn = function (context, data) {
                    var pathFn = function (data) {
                        //return this.context.serviceRootUri + '/fileSystemItems' + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name : "Id", type : "Edm.String", value : data.d.Id }]);
                        return data['__metadata']['id'];
                    };
                    return FileSystemItem.parseFileSystemItems(context, pathFn, data.d.results);
                };
            }
            FileSystemItems.prototype.getFileSystemItem = function (Id) {
                var path = this.path + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name: "Id", type: "Edm.String", value: Id }]);
                var fetcher = new FileSystemItemFetcher(this.context, path);
                return fetcher;
            };

            FileSystemItems.prototype.getFileSystemItems = function () {
                return new MS.Extensions.CollectionQuery(this.context, this.path, this._parseCollectionFn);
            };

            FileSystemItems.prototype.addFileSystemItem = function (item) {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred();

                if (this.entity == null) {
                    var request = new MS.Extensions.Request(this.path);

                    request.method = 'POST';
                    request.data = JSON.stringify(item.getRequestBody());

                    this.context.request(request).then((function (data) {
                        var parsedData = JSON.parse(data), objectPath = parsedData.d['__metadata']['id'];
                        deferred.resolve(FileSystemItem.parseFileSystemItem(_this.context, objectPath, parsedData.d));
                    }).bind(this), deferred.reject.bind(deferred));
                } else {
                    //UNDONE this.context.AddLink(_entity, _path, item);
                }

                return deferred;
            };
            FileSystemItems.prototype.asFiles = function () {
                var parseCollectionFn = (function (context, data) {
                    var pathFn = function (data) {
                        //return this.context.serviceRootUri + '/files' + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name : "Id", type : "Edm.String", value : data.Id }]);
                        return data['__metadata']['id'];
                    };
                    return File.parseFiles(context, pathFn, data.d.results);
                }).bind(this);
                return new MS.Extensions.CollectionQuery(this.context, this.path + '/$/MS.FileServices.File()', parseCollectionFn);
            };
            FileSystemItems.prototype.asFolders = function () {
                var parseCollectionFn = (function (context, data) {
                    var pathFn = function (data) {
                        //return this.context.serviceRootUri + '/folders' + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name : "Id", type : "Edm.String", value : data.Id }]);
                        return data['__metadata']['id'];
                    };
                    return Folder.parseFolders(context, pathFn, data.d.results);
                }).bind(this);
                return new MS.Extensions.CollectionQuery(this.context, this.path + '/$/MS.FileServices.Folder()', parseCollectionFn);
            };
            FileSystemItems.prototype.add = function (name, overwrite, content) {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("Add"));

                request.method = 'GET';

                this.context.request(request).then((function (data) {
                    var parsedData = JSON.parse(data);

                    //var path = this.context.serviceRootUri + '/files' + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name : "Id", type : "Edm.String", value : parsedData.d.Id }]);
                    var path = data.d['__metadata']['id'];
                    deferred.resolve(File.parseFile(_this.context, path, parsedData.d));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };
            FileSystemItems.prototype.getById = function (id) {
                var _this = this;
                var deferred = new Microsoft.Utility.Deferred(), request = new MS.Extensions.Request(this.getPath("GetById"));

                request.method = 'GET';

                this.context.request(request).then((function (data) {
                    var parsedData = JSON.parse(data);

                    //var path = this.context.serviceRootUri + '/fileSystemItems' + Microsoft.Utility.EncodingHelpers.getKeyExpression([{ name : "Id", type : "Edm.String", value : parsedData.d.Id }]);
                    var path = data.d['__metadata']['id'];
                    deferred.resolve(FileSystemItem.parseFileSystemItem(_this.context, path, parsedData.d));
                }).bind(this), deferred.reject.bind(deferred));

                return deferred;
            };
            return FileSystemItems;
        })(MS.Extensions.QueryableSet);
        FileServices.FileSystemItems = FileSystemItems;
    })(MS.FileServices || (MS.FileServices = {}));
    var FileServices = MS.FileServices;
})(MS || (MS = {}));
//# sourceMappingURL=sharepoint.js.map
