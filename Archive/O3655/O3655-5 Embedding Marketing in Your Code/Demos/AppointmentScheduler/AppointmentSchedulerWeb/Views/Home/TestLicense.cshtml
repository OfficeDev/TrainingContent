@model AppointmentSchedulerWeb.Models.TestLicenseData

@{
    ViewBag.Title = "Test License";
}

<h2>Create Test License</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Test License Data</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <!-- App Title -->
        <div class="form-group">
            @Html.LabelFor(model => model.appTitle, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.appTitle, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.appTitle, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- App Name -->
        <div class="form-group">
            @Html.LabelFor(model => model.appName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.appName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.appName, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- License Type -->
        <div class="form-group">
            @Html.LabelFor(model => model.licenseType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.licenseType,
                new SelectList(Enum.GetValues(typeof(AppointmentSchedulerWeb.Filters.LicenseType)).Cast<AppointmentSchedulerWeb.Filters.LicenseType>()),
                new { htmlAttributes = new { @id = "licenseType" } })
            </div>
        </div>

        <!-- Expiration Period -->
        <div class="form-group">
            @Html.LabelFor(model => model.expirationPeriod, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.expirationPeriod,
                new SelectList(Enum.GetValues(typeof(AppointmentSchedulerWeb.Filters.ExpirationPeriod)).Cast<AppointmentSchedulerWeb.Filters.ExpirationPeriod>()),
                new { htmlAttributes = new { @id = "expirationPeriod" } })
            </div>
        </div>

        <!-- User Limit  -->
        <div class="form-group">
            @Html.LabelFor(model => model.userLimit, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.userLimit,
                new SelectList(Enum.GetValues(typeof(AppointmentSchedulerWeb.Filters.UserLimit)).Cast<AppointmentSchedulerWeb.Filters.UserLimit>()),
                new { htmlAttributes = new { @id = "userLimit" } })
            </div>
        </div>

        <!-- Provider Name -->
        <div class="form-group">
            @Html.LabelFor(model => model.providerName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.providerName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.providerName, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Customer Id -->
        <div class="form-group">
            @Html.LabelFor(model => model.CustomerId, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.CustomerId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CustomerId, "", new { @class = "text-danger" })
            </div>
        </div>

        <!-- Submit -->
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create License" class="btn btn-default" />
            </div>
        </div>
    </div>
}

@section scripts {

    <script type="text/javascript">

        jQuery(function () {

            $("#licenseType option:contains('None')").prop("disabled", true);

            jQuery("#licenseType").change(function () {
                var text = jQuery("#licenseType option:selected").text();

                switch (text) {
                    case "Trial":
                        $("#expirationPeriod").prop("disabled", false);
                        $("#expirationPeriod option:contains('Unlimited')").prop("disabled", true);
                        $("#expirationPeriod option:contains('None')").prop("disabled", true);
                        $("#expirationPeriod option:contains('Month')").attr("selected", true);
                        $("#userLimit").prop("disabled", false);
                        $("#userLimit option:contains('Unlimited')").prop("disabled", true);
                        $("#userLimit option:contains('Ten')").attr("selected", true);
                        break;
                    case "Paid":
                        $("#expirationPeriod").prop("disabled", true);
                        $("#expirationPeriod option:contains('None')").attr("selected", true);
                        $("#userLimit").prop("disabled", false);
                        $("#userLimit option:contains('Unlimited')").prop("disabled", false);
                        $("#userLimit option:contains('Unlimited')").attr("selected", true);
                        break;
                    default:
                        $("#expirationPeriod").prop("disabled", true);
                        $("#expirationPeriod option:contains('None')").attr("selected", true);
                        $("#userLimit").prop("disabled", true);
                        $("#userLimit option:contains('Unlimited')").attr("selected", true);
                        break;

                }

            });
        });

    </script>
}